name: CI/CD - New updates to 'master'

on:
  push:
    branches: [master]
  pull_request:

env:
  DEPENDABOT_BRANCH: ci/dependabot-updates
  GIT_USER_NAME: "TEAM 4.0[bot]"
  GIT_USER_EMAIL: "Team4.0@SINTEF.no"
  DEFAULT_REPO_BRANCH: master

jobs:
  # update-dependabot-branch:
  #   name: Update permanent dependabot branch
  #   if: github.repository_owner == 'EMMC-ASBL'
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2
  #     with:
  #       ref: ${{ env.DEPENDABOT_BRANCH }}
  #       fetch-depth: 0

  #   - name: Set up git config
  #     run: |
  #       git config --global user.name "${{ env.GIT_USER_NAME }}"
  #       git config --global user.email "${{ env.GIT_USER_EMAIL }}"

  #   - name: Update '${{ env.DEPENDABOT_BRANCH }}'
  #     run: |
  #       git fetch origin

  #       LATEST_PR_BODY="$(gh api /repos/${{ github.repository}}/pulls -X GET -f state=closed -f per_page=1 -f sort=updated -f direction=desc --jq '.[].body')"
  #       cat .github/utils/single_dependency_pr_body.txt | head -8 > .tmp_file.txt
  #       if [ -z "$(printf '%s\n' "${LATEST_PR_BODY}" | head -8 | diff - .tmp_file.txt --strip-trailing-cr)" ]; then
  #         # The dependency branch has just been merged into `${{ env.DEFAULT_REPO_BRANCH }}`
  #         # The dependency branch should be reset to `${{ env.DEFAULT_REPO_BRANCH }}`
  #         echo "The dependencies have just been updated! Reset to ${{ env.DEFAULT_REPO_BRANCH }}."
  #         git reset --hard origin/${{ env.DEFAULT_REPO_BRANCH }}
  #         echo "FORCE_PUSH=yes" >> $GITHUB_ENV
  #       else
  #         # Normal procedure: Merge `${{ env.DEFAULT_REPO_BRANCH }}` into `${{ env.DEPENDABOT_BRANCH }}`
  #         echo "Merge new updates to ${{ env.DEFAULT_REPO_BRANCH }} into ${{ env.DEPENDABOT_BRANCH }}"
  #         git merge -m "Keep '${{ env.DEPENDABOT_BRANCH }}' up-to-date with '${{ env.DEFAULT_REPO_BRANCH }}'" origin/${{ env.DEFAULT_REPO_BRANCH }}
  #         echo "FORCE_PUSH=no" >> $GITHUB_ENV
  #       fi
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Push to '${{ env.DEPENDABOT_BRANCH }}'
  #     uses: CasperWA/push-protected@v2
  #     with:
  #       token: ${{ secrets.RELEASE_PAT }}
  #       branch: ${{ env.DEPENDABOT_BRANCH }}
  #       sleep: 15
  #       force: ${{ env.FORCE_PUSH }}

  publish-container-image:
    name: Publish Container image on GH Packages
    if: github.repository_owner == 'EMMC-ASBL'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    env:
      IMAGE_NAME: oteapi

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Build image
      run: docker build --file Dockerfile --tag "$IMAGE_NAME:latest" --label "gh_actions_runnumber=${GITHUB_RUN_ID}" --label "oteapi=production" --target production .

    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u TEAM4-0 --password-stdin

    - name: Push image
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        # # Strip git ref prefix from version
        # VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # # Strip "v" prefix from tag name
        # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # # Use Docker `latest` tag convention
        # [ "$VERSION" == "master" ] && VERSION=latest

        echo IMAGE_ID=$IMAGE_ID

        # echo VERSION=$VERSION
        # docker tag $IMAGE_NAME $IMAGE_ID:$VERSION

        docker push $IMAGE_ID
